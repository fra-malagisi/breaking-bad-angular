{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICharacter",
            "id": "interface-ICharacter-99b77506f22e7bea2eebf00abcfd7086",
            "file": "src/app/@views/characters/character.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ICharacter {\n  char_id: number;\n  name: string;\n  birthday: string;\n  occupation: string[];\n  img: string;\n  status: string;\n  nickname: string;\n  appearance: number[];\n  portrayed: string;\n  category: string;\n}\n",
            "properties": [
                {
                    "name": "appearance",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "birthday",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "char_id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "img",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nickname",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "occupation",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "portrayed",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISidenav",
            "id": "interface-ISidenav-9175324bf1c03fb54f9d47b19ca11d79",
            "file": "src/app/@core/sidenav/sidenav.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISidenav {\n  label: string;\n  url: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CharacterService",
            "id": "injectable-CharacterService-90eccc19d35a9e2d3a7210a2ee89f6e0",
            "file": "src/app/@services/character.service.ts",
            "properties": [
                {
                    "name": "basePath",
                    "defaultValue": "`${environment.baseUrlApi}characters`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllCharacters",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICharacter[]>",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, of} from 'rxjs';\nimport {ICharacter} from '../@views/characters/character.interface';\nimport {environment} from '../../environments/environment';\nimport {catchError} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CharacterService {\n\n  private basePath = `${environment.baseUrlApi}characters`;\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  getAllCharacters(): Observable<ICharacter[]> {\n    return this.http.get<ICharacter[]>(`${this.basePath}`).pipe(\n      catchError(err => of([]))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-896c8d70541dcadff96a1d0d80950169",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('bb-fm-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e6cad0cd50bb53861b5578c04570730c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSidenavExpanded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sidenavMenu",
                    "defaultValue": "SidenavMenu",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {SidenavMenu} from './@costants/sidenav.const';\n\n@Component({\n  selector: 'bb-fm-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  sidenavMenu = SidenavMenu;\n  public isSidenavExpanded = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/mixins\";\n\n:host {\n  display: flex;\n  min-height: 100%;\n  flex-direction: column;\n}\n\n.content {\n\n  @include media($to: tbl-l) {\n    padding: 0.5rem 0.5rem;\n  }\n\n  @include media($from: tbl-l) {\n    padding: 2rem 3rem;\n  }\n}\n\n.main {\n  display: flex;\n\n  @include media($to: tbl-l) {\n    flex-direction: column;\n  }\n  min-height: 100%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<bb-fm-header (handleBurgerClicked)=\"isSidenavExpanded = !isSidenavExpanded\"></bb-fm-header>\n<main class=\"main\">\n  <bb-fm-sidenav [menuStructure]=\"sidenavMenu\" [isOpen]=\"isSidenavExpanded\"></bb-fm-sidenav>\n  <div class=\"content\">\n    <router-outlet></router-outlet>\n  </div>\n</main>\n"
        },
        {
            "name": "BurgerButtonComponent",
            "id": "component-BurgerButtonComponent-72eed3338b09def064c15fdff6572784",
            "file": "src/app/@core/header/burger-button/burger-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-burger-button",
            "styleUrls": [
                "burger-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "burger-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 10,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faBars",
                    "defaultValue": "faBars",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Output} from '@angular/core';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'bb-fm-burger-button',\n  templateUrl: 'burger-button.component.html',\n  styleUrls: ['burger-button.component.scss']\n})\nexport class BurgerButtonComponent {\n  @Output() buttonClicked: EventEmitter<void> = new EventEmitter<void>();\n  public faBars = faBars;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.burger-button {\n  @include no-btn-style;\n  border-radius: $border-radius;\n  padding: $padding-base;\n  background-color: $color-background-tertiary;\n  border: solid 1px black;\n  @include media($from: tbl-l) {\n    @include visually-hidden\n  }\n  &:active {\n    background-color: $color-primary;\n    color: white;\n  }\n  &-icon:focus {\n    outline: none;\n  }\n}\n",
                    "styleUrl": "burger-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"burger-button\" (click)=\"buttonClicked.emit()\">\n  <fa-icon\n    class=\"burger-button-icon\"\n    [icon]=\"faBars\" tabindex=\"-1\"></fa-icon>\n</button>\n"
        },
        {
            "name": "CharacterCardComponent",
            "id": "component-CharacterCardComponent-dcdbb95fbf3b6059335e619ca099fd2f",
            "file": "src/app/@views/characters/character-card/character-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-character-card",
            "styleUrls": [
                "character-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "character-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "character",
                    "line": 10,
                    "type": "ICharacter"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ICharacter} from '../character.interface';\n\n@Component({\n  selector: 'bb-fm-character-card',\n  templateUrl: 'character-card.component.html',\n  styleUrls: ['character-card.component.scss']\n})\nexport class CharacterCardComponent {\n  @Input() character!: ICharacter;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/variables';\n@import 'src/styles/mixins';\n\n.character-card {\n\n  --width-size: 400px;\n  --height-size: 329px;\n\n  @include media($to: tbl-l) {\n    --width-size: 100%;\n    --height-size: 280px;\n  }\n\n  display: flex;\n  flex-direction: column;\n  border: $border-width solid black;\n  border-radius: $border-radius;\n  margin: $margin-base ;\n  padding: $padding-base;\n  background-color: $white;\n  min-width: var(--width-size);\n  max-width: var(--width-size);\n  min-height: var(--height-size);\n  max-height: var(--height-size);\n  height: var(--height-size);\n  @include box-shadow($v-offset: 0, $spread-radius: 0);\n\n  @include media($to: tbl-l) {\n    margin: $margin-base 0;\n  }\n\n  &__header {\n    text-align: center;\n  }\n\n  &__title {\n    font-weight: bold;\n    text-transform: uppercase;\n    margin-bottom: $margin-base;\n  }\n\n  &__image-container {\n    height: 100%;\n  }\n\n  &__image {\n    object-fit: cover;\n    object-position: top;\n    width: 200px;\n    height: 100%;\n    border: $border-width solid black;\n\n    @include media($to: tbl-l) {\n      width: 100px;\n    }\n  }\n\n  &__figcaption {\n    @include visually-hidden;\n  }\n\n  &__content {\n    display: flex;\n    height: 90%;\n\n  }\n\n  &__info {\n    padding: 0 $padding-base;\n    display: flex;\n    flex-direction: column;\n    &__label {\n      margin-right: $margin-base / 2;\n      font-weight: bold;\n    }\n    &__detail {\n      margin-bottom: $margin-base / 2;\n      display: flex;\n      align-items: center;\n      &-status-icon {\n        border-radius: 50%;\n        display: inline-block;\n        margin-left: $margin-base / 2;\n        height: $font-size-base / 2;\n        width: $font-size-base / 2;\n        &--alive {\n          background-color: $color-success;\n        }\n\n        &--dead {\n          background-color: $color-error;\n        }\n\n        &--unknown {\n          background-color: $orange;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "character-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<article class=\"character-card\">\n  <header class=\"character-card__header\">\n    <h3 class=\"character-card__title\">{{character?.name}}</h3>\n  </header>\n  <div class=\"character-card__content\">\n    <figure class=\"character-card__image-container\">\n      <img class=\"character-card__image\" [src]=\"character?.img\" [alt]=\"character?.name\">\n    </figure>\n    <dl class=\"character-card__info\">\n      <dt class=\"character-card__info__label\">Nickname:</dt>\n      <dd class=\"character-card__info__detail\">{{character?.nickname}}</dd>\n      <dt class=\"character-card__info__label\">Occupation:</dt>\n      <dd class=\"character-card__info__detail\">\n        <ul>\n          <li *ngFor=\"let occupation of character?.occupation; let isLast = last\">{{occupation}}{{!isLast ? ', ' : ''}}</li>\n        </ul>\n      </dd>\n      <dt class=\"character-card__info__label\">Birthday:</dt>\n      <dd class=\"character-card__info__detail\">{{character?.birthday}}</dd>\n      <dt class=\"character-card__info__label\">Status:</dt>\n      <dd class=\"character-card__info__detail\"> {{character?.status}}\n        <span class=\"character-card__info__detail-status-icon\" [ngClass]=\"{\n        'character-card__info__detail-status-icon--alive': character?.status === 'Alive',\n        'character-card__info__detail-status-icon--dead': character?.status === 'Deceased',\n        'character-card__info__detail-status-icon--unknown': character?.status === 'Presumed dead'\n        }\">\n        </span>\n      </dd>\n    </dl>\n  </div>\n</article>\n"
        },
        {
            "name": "CharacterFiltersComponent",
            "id": "component-CharacterFiltersComponent-dcc868e2107d7ae6e2c75b93f0893305",
            "file": "src/app/@views/characters/character-filter/character-filters.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-caracter-filter",
            "styleUrls": [
                "character-filters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "character-filters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filtersForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'bb-fm-caracter-filter',\n  templateUrl: 'character-filters.component.html',\n  styleUrls: ['character-filters.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CharacterFiltersComponent implements OnInit {\n\n  public filtersForm!: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.createForm();\n    this.filtersForm.valueChanges.subscribe(console.log);\n  }\n\n  createForm(): void {\n    this.filtersForm = this.formBuilder.group({\n      name: []\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/variables';\n@import 'src/styles/mixins';\n\n.character-filters {\n  &__title {\n    font-size: $font-size-subtitle;\n  }\n}\n",
                    "styleUrl": "character-filters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"character-filters__title\">Filters</h2>\n<form [formGroup]=\"filtersForm\">\n  <bb-fm-input\n    id=\"name\"\n    label=\"Name\"\n    formControlName=\"name\"\n  ></bb-fm-input>\n</form>\n"
        },
        {
            "name": "CharacterListComponent",
            "id": "component-CharacterListComponent-a7c12ffed282ecc91a012e562c8d2509",
            "file": "src/app/@views/characters/character-list/character-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-character-list",
            "styleUrls": [
                "character-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "character-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characters",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "ICharacter[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {ICharacter} from '../character.interface';\n\n@Component({\n  selector: 'bb-fm-character-list',\n  templateUrl: 'character-list.component.html',\n  styleUrls: ['character-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CharacterListComponent {\n  @Input() characters: ICharacter[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.characters-gallery {\n\n  &__results {\n    display: flex;\n    grid-area: results;\n    justify-content: center;\n    flex-wrap: wrap;\n    @include media($to: tbl-l) {\n      padding: $padding-base / 2\n    }\n  ;\n\n    @include media($to: tbl-l) {\n      flex-direction: column;\n      align-items: stretch;\n    }\n  }\n}\n",
                    "styleUrl": "character-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<section class=\"characters-gallery\">\n  <section class=\"characters-gallery__results\">\n    <bb-fm-character-card *ngFor=\"let character of characters\" [character]=\"character\"></bb-fm-character-card>\n  </section>\n</section>\n"
        },
        {
            "name": "CharactersContainer",
            "id": "component-CharactersContainer-9405685c7ea4bf09b1b9c2c8c4732681",
            "file": "src/app/@views/characters/characters.container.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-characters",
            "styleUrls": [
                "characters-container.scss"
            ],
            "styles": [],
            "templateUrl": [
                "characters.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "characters$",
                    "type": "Observable<ICharacter[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "charactersPerPage",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "currentPage",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCharactersForPage",
                    "args": [
                        {
                            "name": "characters",
                            "type": "ICharacter[]"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "ICharacter[]",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "characters",
                            "type": "ICharacter[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {CharacterService} from '../../@services/character.service';\nimport {combineLatest, Observable} from 'rxjs';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {map, shareReplay, tap} from 'rxjs/operators';\nimport {ICharacter} from './character.interface';\n\n@Component({\n  selector: 'bb-fm-characters',\n  templateUrl: 'characters.container.html',\n  styleUrls: ['characters-container.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CharactersContainer implements OnInit {\n\n  public characters$: Observable<ICharacter[]> | undefined;\n  public totalCharacters!: number;\n  public charactersPerPage = 4;\n  public currentPage !: number;\n\n  constructor(\n    private characterService: CharacterService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n     this.characters$ = combineLatest([\n      this.characterService.getAllCharacters().pipe(shareReplay()),\n      this.activatedRoute.queryParams\n    ]).pipe(\n      tap(([characters, {page}]) => {\n        this.totalCharacters = characters.length;\n        this.currentPage = page ?? 1;\n        this.currentPage = Number.parseInt(this.currentPage.toString(), 10);\n      }),\n       map(([characters, {page}]) => this.getCharactersForPage(characters, page))\n    );\n  }\n\n  handlePageChange(page: number): void {\n    const queryParams: Params = { page };\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.activatedRoute,\n        queryParams,\n        queryParamsHandling: 'merge'\n      });\n  }\n\n  getCharactersForPage(characters: ICharacter[], page: number): ICharacter[] {\n    const startLimit = ((page ?? 1) - 1) * this.charactersPerPage;\n    return characters.slice(startLimit, startLimit + this.charactersPerPage);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n:host {\n  display: grid;\n  grid-gap: $margin-base;\n\n  @include media($to: tbl-l) {\n    grid-template-areas:\n      'title'\n      'paginator'\n      'filters'\n      'list';\n  }\n\n  @include media($from: tbl-l) {\n    grid-template-columns: 25%;\n    grid-template-areas:\n      'title paginator'\n      'filters list';\n  }\n}\n.characters {\n  &__title {\n    font-size: $font-size-title;\n    margin: $margin-base 0;\n    grid-area: title;\n    text-transform: uppercase;\n  }\n  &__list {\n    grid-area: list;\n  }\n  &__filters {\n    grid-area: filters;\n  }\n  &__paginator {\n    grid-area: paginator;\n  }\n}\n",
                    "styleUrl": "characters-container.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "characterService",
                        "type": "CharacterService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "characterService",
                        "type": "CharacterService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"characters__title\">Characters</h2>\n<bb-fm-caracter-filter class=\"characters__filters\"></bb-fm-caracter-filter>\n<ng-container *ngIf=\"(characters$ | async) as characters\">\n  <bb-fm-paginator\n    class=\"characters__paginator\"\n    [totalItems]=\"totalCharacters\"\n    [maxItemPerPage]=\"charactersPerPage\"\n    [currentPage]=\"currentPage\"\n    (onPageChange)=\"handlePageChange($event)\"\n  ></bb-fm-paginator>\n  <bb-fm-character-list\n    class=\"characters__list\"\n    [characters]=\"characters\"></bb-fm-character-list>\n</ng-container>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3ff70fd0af9c2dcacd05a6773c8dc8ef",
            "file": "src/app/@core/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-header",
            "styleUrls": [
                "header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "handleBurgerClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 10,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Output} from '@angular/core';\n\n@Component({\n  selector: 'bb-fm-header',\n  templateUrl: 'header.component.html',\n  styleUrls: ['header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n  @Output() handleBurgerClicked: EventEmitter<void> = new EventEmitter<void>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.header {\n  $height-header: 100px;\n  $padding-header: $padding-base;\n\n  height: $height-header;\n  padding: $padding-header;\n  text-align: left;\n  z-index: $z-index-header;\n  background-color: $color-background-secondary;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @include box-shadow;\n\n  &__figure {\n    display: inline-block;\n  }\n\n  &__figcaption {\n    @include visually-hidden;\n  }\n\n  &__logo {\n    height: calc(#{$height-header} - #{$padding-header * 2});\n    stroke: $color-secondary;\n    stroke-opacity: 0.8;\n    stroke-width: 2px;\n  }\n\n  &__title {\n    @include visually-hidden;\n  }\n}\n",
                    "styleUrl": "header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<header class=\"header\">\n  <h1 class=\"header__title\">Breaking Bad (Component store example)</h1>\n  <figure class=\"header__figure\">\n    <img class=\"header__logo\" src=\"assets/images/Breaking_Bad_logo.svg\" alt=\"logo\">\n    <figcaption class=\"header__figcaption\">Breaking Bad Logo</figcaption>\n  </figure>\n  <bb-fm-burger-button (buttonClicked)=\"handleBurgerClicked.emit()\"></bb-fm-burger-button>\n</header>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-d9e39dbc7813b334d148d26fa7edf41f",
            "file": "src/app/@shared/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "bb-fm-input",
            "styleUrls": [
                "input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOnFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, forwardRef, Input, Renderer2} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n@Component({\n  selector: 'bb-fm-input',\n  templateUrl: 'input.component.html',\n  styleUrls: ['input.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputComponent),\n    multi: true,\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputComponent implements ControlValueAccessor {\n\n  @Input() id!: string;\n  @Input() label!: string;\n  value = '';\n  isOnFocus = false;\n\n  onChange: any = () => {};\n  onTouch: any = () => {};\n\n  constructor(private renderer: Renderer2) {}\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n  writeValue(value: string): void {\n    this.value = value;\n  }\n\n  onFocus(): void {\n    this.isOnFocus = true;\n  }\n\n  onBlur(): void {\n    this.isOnFocus = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.input {\n  margin: $margin-base 0;\n  position: relative;\n\n  &__field {\n    display: block;\n    border: {\n      bottom: $border-width solid $color-primary;\n      right: none;\n      left: none;\n      top: none;\n    }\n    font-size: $font-size-base;\n    padding: $padding-base / 2;\n    width: 100%;\n\n    &:focus,\n    &:active {\n      outline: none;\n      border-bottom: $border-width * 2 solid $color-secondary;\n    }\n  }\n\n  &__label {\n    font-size: $font-size-base;\n    pointer-events: none;\n    transition: $transition-speed $transition-effect all;\n\n    &--shrink {\n       @include shrink-label;\n     }\n  }\n}\n",
                    "styleUrl": "input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"input\">\n  <input class=\"input__field\" [id]=\"id\"\n         [(ngModel)]=\"value\"\n         (ngModelChange)=\"onChange($event)\"\n         (focus)=\"onFocus()\"\n         (blur)=\"onBlur()\"\n  />\n  <label class=\"input__label\" [class.input__label--shrink]=\"isOnFocus || value\" [for]=\"id\">{{label}}</label>\n</div>\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-f8087e6774d01732916a93455e398ecb",
            "file": "src/app/@shared/paginator/paginator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-paginator",
            "styleUrls": [
                "paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "line": 19
                },
                {
                    "name": "maxItemPerPage",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "totalItems",
                    "defaultValue": "1",
                    "line": 17
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "breakpoint$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "maxShownPages",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "nextPages",
                    "defaultValue": "[]",
                    "type": "PageArray[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPages",
                    "defaultValue": "[]",
                    "type": "PageArray[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addInitialAndEnd",
                    "args": [
                        {
                            "name": "type",
                            "type": "AddOperation"
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "PageArray[]",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "AddOperation",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPage",
                    "args": [
                        {
                            "name": "type",
                            "type": "AddOperation"
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "PageArray[]",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "AddOperation",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentPosition",
                    "args": [
                        {
                            "name": "type",
                            "type": "AddOperation"
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "AddOperation",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLastPage",
                    "args": [
                        {
                            "name": "type",
                            "type": "AddOperation"
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "AddOperation",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePageClick",
                    "args": [
                        {
                            "name": "page",
                            "type": "PageArray"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "PageArray",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPagesFull",
                    "args": [
                        {
                            "name": "type",
                            "type": "AddOperation"
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "AddOperation",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isStartOrEnd",
                    "args": [
                        {
                            "name": "type",
                            "type": "AddOperation"
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "AddOperation",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "PageArray[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "setEmptyPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "setNextPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "setPreviousPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setTotalPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {tap} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\ntype AddOperation = 'previous' | 'next';\nexport type PageArray = string | number;\n\n\n@Component({\n  selector: 'bb-fm-paginator',\n  templateUrl: 'paginator.component.html',\n  styleUrls: ['paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorComponent implements OnInit {\n  @Input() totalItems = 1;\n  @Input() maxItemPerPage!: number;\n  @Input() currentPage = 1;\n  @Output() onPageChange = new EventEmitter<number>();\n  public totalPages!: number;\n  public previousPages: PageArray[] = [];\n  public breakpoint$!: Observable<any>;\n  public nextPages: PageArray[] = [];\n  private maxShownPages = 3;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private cdRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.setTotalPages();\n    this.breakpoint$ = this.breakpointObserver.observe([Breakpoints.Handset]).pipe(\n     tap(({matches}) => {\n       this.maxShownPages = matches ? 1 : 3;\n       this.setPages();\n       this.cdRef.detectChanges();\n     })\n    );\n  }\n\n  setPages(): void {\n    this.setEmptyPages();\n    this.setPreviousPages();\n    this.setNextPages();\n  }\n\n  private setTotalPages(): void {\n    this.totalPages =  Math.ceil(this.totalItems / this.maxItemPerPage);\n  }\n\n  handlePageClick(page: PageArray): void {\n    this.currentPage = Number.parseInt(page as string, 10);\n    this.onPageChange.emit(this.currentPage);\n    this.setPages();\n  }\n\n  setEmptyPages(): void {\n    this.nextPages = [];\n    this.previousPages = [];\n  }\n\n  private setNextPages(): void {\n    this.nextPages = this.addPage('next', this.nextPages);\n  }\n\n  private setPreviousPages(): void {\n    this.previousPages = this.addPage('previous', this.previousPages);\n  }\n\n  private addPage(type: AddOperation, current: PageArray[]): PageArray[] {\n    const pageUpdated = type === 'next' ?\n      [...current, this.getLastPage(type, current) + 1] : [this.getLastPage(type, current) - 1, ...current];\n    return this.isPagesFull(type, current) ? this.addInitialAndEnd(type, current) : this.addPage(type, pageUpdated);\n  }\n\n  isPagesFull(type: AddOperation, current: PageArray[]): boolean {\n    const currentPosition = this.getCurrentPosition(type, current);\n    return current.length === this.maxShownPages || (type === 'next' ? currentPosition >= this.totalPages : currentPosition <= 1);\n  }\n\n  getCurrentPosition(type: AddOperation, current: PageArray[]): number {\n    return type === 'next' ? this.currentPage + current.length : this.currentPage - current.length;\n  }\n\n  getLastPage(type: AddOperation, current: PageArray[]): number {\n    return (type === 'previous' ?\n      current[0] || this.currentPage :\n      current[current.length - 1] || this.currentPage) as number;\n  }\n\n  addInitialAndEnd(type: AddOperation, current: PageArray[]): PageArray[] {\n    if (this.isStartOrEnd(type, current)) {\n      return current;\n    }\n    return type === 'next' ? [...current, '...', this.totalPages] : [1, '...', ...current];\n  }\n\n  isStartOrEnd(type: AddOperation, current: PageArray[]): boolean {\n    return !current[0] || (type === 'next' && current[current.length - 1] === this.totalPages) || (type === 'previous' && current[0] === 1);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.paginator {\n  padding: $padding-base;\n  display: flex;\n  justify-content: center;\n}\n",
                    "styleUrl": "paginator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"paginator\" *ngIf=\"breakpoint$ | async\">\n  <bb-fm-paginator-element *ngFor=\"let page of previousPages\"\n                           [pageNumber]=\"page\"\n                           (onClick)=\"handlePageClick($event)\"\n  ></bb-fm-paginator-element>\n  <bb-fm-paginator-element [pageNumber]=\"currentPage\" [isActive]=\"true\"></bb-fm-paginator-element>\n  <bb-fm-paginator-element *ngFor=\"let page of nextPages\"\n                           [pageNumber]=\"page\"\n                           (onClick)=\"handlePageClick($event)\"\n  ></bb-fm-paginator-element>\n</div>\n"
        },
        {
            "name": "PaginatorElementComponent",
            "id": "component-PaginatorElementComponent-2829add455e02c6645ceadb904c651c6",
            "file": "src/app/@shared/paginator/paginator-element/paginator-element.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-paginator-element",
            "styleUrls": [
                "paginator-element.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "paginator-element.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 13
                },
                {
                    "name": "pageNumber",
                    "line": 12,
                    "type": "PageArray"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<PageArray>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isDots",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "isNotDotsOrActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {PageArray} from '../paginator.component';\n\n@Component({\n  selector: 'bb-fm-paginator-element',\n  templateUrl: 'paginator-element.component.html',\n  styleUrls: ['paginator-element.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorElementComponent {\n\n  @Input() pageNumber!: PageArray;\n  @Input() isActive = false;\n  @Output() onClick = new EventEmitter<PageArray>();\n\n  isNotDotsOrActive(): boolean {\n    return !this.isDots() && !this.isActive;\n  }\n\n  isDots(): boolean {\n    return this.pageNumber === '...';\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.paginator-element {\n  padding: $padding-base / 2;\n  margin: $margin-base / 2;\n  transition: background-color $transition-speed;\n\n  &--clickable {\n    cursor: pointer;\n  }\n\n  &--active {\n    border: 3px solid #29773E;\n  }\n\n  &:hover:not(&--active):not(&--dots) {\n    background-color: rgba(41, 119, 62, 0.3);\n  }\n}\n",
                    "styleUrl": "paginator-element.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"paginator-element\"\n     [class.paginator-element--clickable]=\"isNotDotsOrActive()\"\n     [class.paginator-element--active]=\"isActive\"\n     [class.paginator-element--dots]=\"isDots()\"\n     (click)=\"isNotDotsOrActive() && onClick.emit(pageNumber)\"\n>\n  {{pageNumber}}\n</div>\n"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-3952acbd6b8acb56b3cf71d08e8d11a3",
            "file": "src/app/@core/sidenav/sidenav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-sidenav",
            "styleUrls": [
                "sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "sidenav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "line": 14
                },
                {
                    "name": "menuStructure",
                    "defaultValue": "[]",
                    "line": 13,
                    "type": "ISidenav[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faArrowLeft",
                    "defaultValue": "faArrowLeft",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "faArrowRight",
                    "defaultValue": "faArrowRight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {ISidenav} from './sidenav.interface';\nimport {faArrowLeft, faArrowRight} from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'bb-fm-sidenav',\n  templateUrl: 'sidenav.component.html',\n  styleUrls: ['sidenav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SidenavComponent {\n\n  @Input() menuStructure: ISidenav[] = [];\n  @Input() isOpen = false;\n  faArrowRight = faArrowRight;\n  faArrowLeft = faArrowLeft;\n\n  toggle(): void {\n    this.isOpen = !this.isOpen;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.sidenav {\n\n  @include media($from: tbl-l) {\n    height: 100vh;\n    padding-top: $padding-base * 4;\n  }\n\n  position: sticky;\n  z-index: 1;\n  bottom: 0;\n  left: 0;\n  top: 0;\n  background-color: $color-background-tertiary;\n  overflow-x: hidden;\n  transition: 0.5s;\n\n  &--open {\n\n    @include media($from: tbl-l) {\n      width: 14rem;\n    }\n\n  }\n\n  &--closed {\n\n    @include media($to: tbl-l) {\n      display: none;\n    }\n\n    @include media($from: tbl-l) {\n      width: 2rem;\n    }\n  }\n\n  &__button {\n    @include media($to: tbl-l) {\n      @include visually-hidden;\n    }\n    background: none;\n    color: white;\n    border: none;\n    padding: 0;\n    font: inherit;\n    cursor: pointer;\n    position: absolute;\n    top: 0;\n    right: 5px;\n    font-size: $font-size-title;\n    margin-left: 50px;\n    button:hover,\n    &-icon:focus {\n     outline: none;\n    }\n  }\n  &__list {\n    display: flex;\n    flex-direction: column;\n    &-item {\n      border-width: 2px 0;\n      border-style: solid;\n      border-color: white;\n      padding: $padding-base;\n      display: flex;\n      justify-content: center;\n      &__button {\n        @include no-btn-style;\n        font-size: $font-size-base;\n        font-weight: bold;\n        text-transform: uppercase;\n        color: white;\n        cursor: pointer;\n        &__content:focus {\n          outline: none;\n        }\n        &--active {\n          color: yellow;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nav aria-label=\"Main Navigation\" class=\"sidenav\" [ngClass]=\"{\n 'sidenav--open': isOpen,\n 'sidenav--closed': !isOpen\n}\">\n  <button class=\"sidenav__button\" (click)=\"toggle()\">\n    <fa-icon\n      class=\"header__button-icon\"\n      [icon]=\"isOpen ? faArrowLeft : faArrowRight\" tabindex=\"-1\"></fa-icon>\n  </button>\n  <ul *ngIf=\"isOpen\" class=\"sidenav__list\">\n    <li class=\"sidenav__list-item\" *ngFor=\"let menuItem of menuStructure\">\n      <button class=\"sidenav__list-item__button\" [routerLink]=\"menuItem.url\" [routerLinkActive]=\"['sidenav__list-item__button--active']\">\n        <span tabindex=\"-1\" class=\"sidenav__list-item__button__content\">{{menuItem.label}}</span>\n      </button>\n    </li>\n    <!-- <li class=\"has-submenu\">\n      <a href=\"…\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        Space Bears\n      </a>\n      <ul>\n        <li><a href=\"…\">Space Bear 6</a></li>\n        <li><a href=\"…\">Space Bear 6 Plus</a></li>\n      </ul>\n    </li> -->\n  </ul>\n</nav>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CharactersModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CharacterCardComponent"
                        },
                        {
                            "name": "CharacterFiltersComponent"
                        },
                        {
                            "name": "CharacterListComponent"
                        },
                        {
                            "name": "CharactersContainer"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CharactersRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CharactersRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BurgerButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SidenavComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SidenavComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PaginatorElementComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator.stories.ts",
                "type": "object",
                "defaultValue": "{\n  handlePageClick: action('handlePageClick', {allowFunction: true})\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator-element.stories.ts",
                "type": "object",
                "defaultValue": "{\n  onClick: action('onClick'),\n  isNotDotsOrActive: action('isNotDotsOrActive'),\n  isDots: action('isDots')\n}"
            },
            {
                "name": "Active",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/burger-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Active",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator-element.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "characterMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/character-card.stories.ts",
                "type": "object",
                "defaultValue": "{\n  appearance: [1, 2, 3, 4, 5],\n  birthday: '09-07-1958',\n  category: 'Breaking Bad',\n  char_id: 1,\n  img: 'https://images.amcnetworks.com/amc.com/wp-content/uploads/2015/04/cast_bb_700x1000_walter-white-lg.jpg',\n  name: 'Walter White',\n  nickname: 'Heisenberg',\n  occupation: ['High School Chemistry Teacher', 'Meth King Pin'],\n  portrayed: 'Bryan Cranston',\n  status: 'Presumed dead'\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/burger-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator-element.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrlApi: 'https://www.breakingbadapi.com/api/'\n}"
            },
            {
                "name": "Focused",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "getCharacterWithSelectedStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/character-card.stories.ts",
                "type": "",
                "defaultValue": "(status: string) => ({\n  ...characterMock,\n  status\n})"
            },
            {
                "name": "Hovered",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator-element.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/character-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SidenavMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@costants/sidenav.const.ts",
                "type": "ISidenav[]",
                "defaultValue": "[\n  {\n    label: 'Characters',\n    url: 'characters'\n  }\n]"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/character-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/burger-button.stories.ts",
                "type": "Story<BurgerButtonComponent>",
                "defaultValue": "(args: BurgerButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/character-card.stories.ts",
                "type": "Story<CharacterCardComponent>",
                "defaultValue": "(args: CharacterCardComponent | any) => {\n  const {status} = args;\n  return {\n    component: CharacterCardComponent,\n    props: {\n      ...args,\n      character: status ? getCharacterWithSelectedStatus(status) : args.character\n    }\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator.stories.ts",
                "type": "Story<PaginatorComponent>",
                "defaultValue": "(args: PaginatorComponent) => ({\n  props: {\n    ...args,\n    component: PaginatorComponent,\n    handlePageClick: actionsData.handlePageClick,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/paginator-element.stories.ts",
                "type": "Story<PaginatorElementComponent>",
                "defaultValue": "args => ({\n  component: PaginatorElementComponent,\n  props: {\n    ...args,\n    onClick: actionsData.onClick,\n    isNotDotsOrActive: actionsData.isNotDotsOrActive,\n    isDots: actionsData.isDots\n  },\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AddOperation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"previous\" | \"next\"",
                "file": "src/app/@shared/paginator/paginator.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PageArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number",
                "file": "src/app/@shared/paginator/paginator.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/paginator.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  handlePageClick: action('handlePageClick', {allowFunction: true})\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator.stories.ts",
                    "type": "Story<PaginatorComponent>",
                    "defaultValue": "(args: PaginatorComponent) => ({\n  props: {\n    ...args,\n    component: PaginatorComponent,\n    handlePageClick: actionsData.handlePageClick,\n  },\n})"
                }
            ],
            "src/stories/paginator-element.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator-element.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  onClick: action('onClick'),\n  isNotDotsOrActive: action('isNotDotsOrActive'),\n  isDots: action('isDots')\n}"
                },
                {
                    "name": "Active",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator-element.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator-element.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Hovered",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator-element.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/paginator-element.stories.ts",
                    "type": "Story<PaginatorElementComponent>",
                    "defaultValue": "args => ({\n  component: PaginatorElementComponent,\n  props: {\n    ...args,\n    onClick: actionsData.onClick,\n    isNotDotsOrActive: actionsData.isNotDotsOrActive,\n    isDots: actionsData.isDots\n  },\n})"
                }
            ],
            "src/stories/burger-button.stories.ts": [
                {
                    "name": "Active",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/burger-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/burger-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/burger-button.stories.ts",
                    "type": "Story<BurgerButtonComponent>",
                    "defaultValue": "(args: BurgerButtonComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/character-card.stories.ts": [
                {
                    "name": "characterMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/character-card.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  appearance: [1, 2, 3, 4, 5],\n  birthday: '09-07-1958',\n  category: 'Breaking Bad',\n  char_id: 1,\n  img: 'https://images.amcnetworks.com/amc.com/wp-content/uploads/2015/04/cast_bb_700x1000_walter-white-lg.jpg',\n  name: 'Walter White',\n  nickname: 'Heisenberg',\n  occupation: ['High School Chemistry Teacher', 'Meth King Pin'],\n  portrayed: 'Bryan Cranston',\n  status: 'Presumed dead'\n}"
                },
                {
                    "name": "getCharacterWithSelectedStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/character-card.stories.ts",
                    "type": "",
                    "defaultValue": "(status: string) => ({\n  ...characterMock,\n  status\n})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/character-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/character-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/character-card.stories.ts",
                    "type": "Story<CharacterCardComponent>",
                    "defaultValue": "(args: CharacterCardComponent | any) => {\n  const {status} = args;\n  return {\n    component: CharacterCardComponent,\n    props: {\n      ...args,\n      character: status ? getCharacterWithSelectedStatus(status) : args.character\n    }\n  };\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/stories/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Focused",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrlApi: 'https://www.breakingbadapi.com/api/'\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/@costants/sidenav.const.ts": [
                {
                    "name": "SidenavMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@costants/sidenav.const.ts",
                    "type": "ISidenav[]",
                    "defaultValue": "[\n  {\n    label: 'Characters',\n    url: 'characters'\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/@shared/paginator/paginator.component.ts": [
                {
                    "name": "AddOperation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"previous\" | \"next\"",
                    "file": "src/app/@shared/paginator/paginator.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PageArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number",
                    "file": "src/app/@shared/paginator/paginator.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "characters"
                    },
                    {
                        "path": "characters",
                        "loadChildren": "./@views/characters/characters.module#CharactersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/@views/characters/characters-routing.module.ts",
                                        "module": "CharactersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CharactersContainer"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CharactersModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/header/burger-button/burger-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BurgerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/sidenav/sidenav.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISidenav",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@costants/sidenav.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SidenavMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@services/character.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CharacterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/paginator/paginator-element/paginator-element.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorElementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character-card/character-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character-filter/character-filters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterFiltersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character-list/character-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICharacter",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/characters.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharactersContainer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/burger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Active",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/burger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/burger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/character-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "characterMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/character-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCharacterWithSelectedStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/character-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/character-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/character-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Focused",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator-element.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator-element.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Active",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator-element.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator-element.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Hovered",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator-element.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}