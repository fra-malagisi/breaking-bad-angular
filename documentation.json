{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICharacter",
            "id": "interface-ICharacter-fc12cb7a68cdfbd525543cb4c29ab037",
            "file": "src/app/@views/characters/character.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ICharacter {\n  char_id: number;\n  name: string;\n  birthday: string;\n  occupation: string;\n  img: string;\n  status: string;\n  nickname: string;\n  appearance: string;\n  portrayed: string;\n  category: string;\n}\n",
            "properties": [
                {
                    "name": "appearance",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "birthday",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "char_id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "img",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nickname",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "occupation",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "portrayed",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISidenav",
            "id": "interface-ISidenav-9175324bf1c03fb54f9d47b19ca11d79",
            "file": "src/app/@core/sidenav/sidenav.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISidenav {\n  label: string;\n  url: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CharacterService",
            "id": "injectable-CharacterService-bc32a3d1ea788e07c6e2b2a1b39a94cd",
            "file": "src/app/@services/character.service.ts",
            "properties": [
                {
                    "name": "basePath",
                    "defaultValue": "`${environment.baseUrlApi}characters/`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllCharacters",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICharacter[]>",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, of} from 'rxjs';\nimport {ICharacter} from '../@views/characters/character.interface';\nimport {environment} from '../../environments/environment';\nimport {catchError, tap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CharacterService {\n\n  private basePath = `${environment.baseUrlApi}characters/`;\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  getAllCharacters(): Observable<ICharacter[]> {\n    return this.http.get<ICharacter[]>(`${this.basePath}`).pipe(\n      catchError(err => of([]))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-896c8d70541dcadff96a1d0d80950169",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('bb-fm-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e6cad0cd50bb53861b5578c04570730c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSidenavExpanded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sidenavMenu",
                    "defaultValue": "SidenavMenu",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {SidenavMenu} from './@costants/sidenav.const';\n\n@Component({\n  selector: 'bb-fm-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  sidenavMenu = SidenavMenu;\n  public isSidenavExpanded = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/mixins\";\n\n:host {\n  display: flex;\n  min-height: 100%;\n  flex-direction: column;\n}\n\n.content {\n\n  @include media($to: tbl-l) {\n    padding: 0.5rem 0.5rem;\n  }\n\n  @include media($from: tbl-l) {\n    padding: 2rem 3rem;\n  }\n}\n\n.main {\n  display: flex;\n\n  @include media($to: tbl-l) {\n    flex-direction: column;\n  }\n  min-height: 100%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<bb-fm-header (buttonClicked)=\"isSidenavExpanded = !isSidenavExpanded\"></bb-fm-header>\n<main class=\"main\">\n  <bb-fm-sidenav [menuStructure]=\"sidenavMenu\" [isOpen]=\"isSidenavExpanded\"></bb-fm-sidenav>\n  <div class=\"content\">\n    <router-outlet></router-outlet>\n  </div>\n</main>\n"
        },
        {
            "name": "BurgerButtonComponent",
            "id": "component-BurgerButtonComponent-8811d39215c7f93d9daf512e6b0b1c19",
            "file": "src/app/@core/header/burger-button/burger-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-burger-button",
            "styleUrls": [
                "burger-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "burger-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 10,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faBars",
                    "defaultValue": "faBars",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Output} from '@angular/core';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'bb-fm-burger-button',\n  templateUrl: 'burger-button.component.html',\n  styleUrls: ['burger-button.component.scss']\n})\nexport class BurgerButtonComponent {\n  @Output() buttonClicked: EventEmitter<void> = new EventEmitter<void>();\n  faBars = faBars;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.burger-button {\n  @include no-btn-style;\n  border-radius: $border-radius;\n  padding: $padding-base;\n  background-color: $color-background-tertiary;\n  border: solid 1px black;\n  @include media($from: tbl-l) {\n    @include visually-hidden\n  }\n  &:active {\n    background-color: $color-primary;\n    color: white;\n  }\n  &-icon:focus {\n    outline: none;\n  }\n}\n",
                    "styleUrl": "burger-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"burger-button\" (click)=\"buttonClicked.emit()\">\n  <fa-icon\n    class=\"burger-button-icon\"\n    [icon]=\"faBars\" tabindex=\"-1\"></fa-icon>\n</button>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CharacterCardComponent",
            "id": "component-CharacterCardComponent-6e9b8fc440beb400fdc7dcc4c13b68c9",
            "file": "src/app/@views/characters/character-card/character-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-character-card",
            "styleUrls": [
                "character-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "character-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "character",
                    "line": 10,
                    "type": "ICharacter | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ICharacter} from '../character.interface';\n\n@Component({\n  selector: 'bb-fm-character-card',\n  templateUrl: 'character-card.component.html',\n  styleUrls: ['character-card.component.scss']\n})\nexport class CharacterCardComponent {\n  @Input() character: ICharacter | undefined;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/variables';\n@import 'src/styles/mixins';\n\n.character-card {\n\n  --width-size: 400px;\n  --height-size: 329px;\n\n  @include media($to: tbl-l) {\n    --width-size: 100%;\n    --height-size: 280px;\n  }\n\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n  border-radius: $border-radius;\n  margin: $margin-base ;\n  padding: $padding-base;\n  background-color: $white;\n  min-width: var(--width-size);\n  max-width: var(--width-size);\n  min-height: var(--height-size);\n  max-height: var(--height-size);\n  height: var(--height-size);\n  @include box-shadow($v-offset: 0, $spread-radius: 0);\n\n  @include media($to: tbl-l) {\n    margin: $margin-base 0;\n  }\n\n  &__header {\n    text-align: center;\n  }\n\n  &__title {\n    font-weight: bold;\n    text-transform: uppercase;\n    margin-bottom: $margin-base;\n  }\n\n  &__image-container {\n    height: 100%;\n  }\n\n  &__image {\n    object-fit: cover;\n    object-position: top;\n    width: 200px;\n    height: 100%;\n    border: solid 1px black;\n\n    @include media($to: tbl-l) {\n      width: 100px;\n    }\n  }\n\n  &__figcaption {\n    @include visually-hidden;\n  }\n\n  &__content {\n    display: flex;\n    height: 90%;\n\n  }\n\n  &__info {\n    padding: 0 $padding-base;\n    display: flex;\n    flex-direction: column;\n    &__label {\n      margin-right: $margin-base / 2;\n      font-weight: bold;\n    }\n    &__detail {\n      margin-bottom: $margin-base / 2;\n      display: flex;\n      align-items: center;\n      &-status-icon {\n        border-radius: 50%;\n        display: inline-block;\n        margin-left: $margin-base / 2;\n        height: $font-size-base / 2;\n        width: $font-size-base / 2;\n        &--alive {\n          background-color: $color-success;\n        }\n\n        &--dead {\n          background-color: $color-error;\n        }\n\n        &--unknown {\n          background-color: $orange;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "character-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<article class=\"character-card\">\n  <header class=\"character-card__header\">\n    <h3 class=\"character-card__title\">{{character?.name}}</h3>\n  </header>\n  <div class=\"character-card__content\">\n    <figure class=\"character-card__image-container\">\n      <img class=\"character-card__image\" [src]=\"character?.img\">\n    </figure>\n    <dl class=\"character-card__info\">\n      <dt class=\"character-card__info__label\">Nickname:</dt>\n      <dd class=\"character-card__info__detail\">{{character?.nickname}}</dd>\n      <dt class=\"character-card__info__label\">Occupation:</dt>\n      <dd class=\"character-card__info__detail\">\n        <ul>\n          <li *ngFor=\"let occupation of character?.occupation; let isLast = last\">{{occupation}}{{!isLast ? ', ' : ''}}</li>\n        </ul>\n      </dd>\n      <dt class=\"character-card__info__label\">Birthday:</dt>\n      <dd class=\"character-card__info__detail\">{{character?.birthday}}</dd>\n      <dt class=\"character-card__info__label\">Status:</dt>\n      <dd class=\"character-card__info__detail\"> {{character?.status}}\n        <span class=\"character-card__info__detail-status-icon\" [ngClass]=\"{\n        'character-card__info__detail-status-icon--alive': character?.status === 'Alive',\n        'character-card__info__detail-status-icon--dead': character?.status === 'Deceased',\n        'character-card__info__detail-status-icon--unknown': character?.status === 'Presumed dead'\n        }\">\n        </span>\n      </dd>\n    </dl>\n  </div>\n</article>\n"
        },
        {
            "name": "CharacterListComponent",
            "id": "component-CharacterListComponent-29f7882991d3b8a29eee8ca65330ae74",
            "file": "src/app/@views/characters/character-list/character-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-character-list",
            "styleUrls": [
                "character-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "character-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characters",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "ICharacter[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {ICharacter} from '../character.interface';\n\n@Component({\n  selector: 'bb-fm-character-list',\n  templateUrl: 'character-list.component.html',\n  styleUrls: ['character-list.component.scss']\n})\nexport class CharacterListComponent implements OnInit{\n  @Input() characters: ICharacter[] = [];\n\n  ngOnInit(): void {\n    console.log(this.characters);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.characters-gallery {\n  display: grid;\n  grid-gap: $margin-base;\n\n  @include media($to: tbl-l) {\n    grid-template-areas:\n      'title'\n      'results';\n  }\n\n  @include media($from: tbl-l) {\n    grid-template-columns: 25%;\n    grid-template-areas:\n      'title title'\n      '. results';\n  }\n\n  &__title {\n    font-size: $font-size-title;\n    grid-area: title;\n    margin: $margin-base 0;\n    text-transform: uppercase;\n  }\n  &__results {\n    display: flex;\n    grid-area: results;\n    justify-content: center;\n    flex-wrap: wrap;\n    @include media($to: tbl-l) {\n      padding: $padding-base / 2\n    }\n  ;\n\n    @include media($to: tbl-l) {\n      flex-direction: column;\n      align-items: stretch;\n    }\n  }\n}\n",
                    "styleUrl": "character-list.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"characters-gallery\">\n  <h2 class=\"characters-gallery__title\">Characters</h2>\n  <section class=\"characters-gallery__results\">\n    <bb-fm-character-card *ngFor=\"let character of characters\" [character]=\"character\"></bb-fm-character-card>\n  </section>\n</div>\n"
        },
        {
            "name": "CharactersContainer",
            "id": "component-CharactersContainer-a85ebd03682961a803ef99dacd6fb9b1",
            "file": "src/app/@views/characters/characters.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-characters",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "characters.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "characters$",
                    "type": "Observable<ICharacter[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {CharacterService} from '../../@services/character.service';\nimport {Observable} from 'rxjs';\nimport {ICharacter} from './character.interface';\n\n@Component({\n  selector: 'bb-fm-characters',\n  templateUrl: 'characters.container.html'\n})\nexport class CharactersContainer implements OnInit {\n\n  characters$: Observable<ICharacter[]> | undefined;\n\n  constructor(\n    private characterService: CharacterService\n  ) {}\n\n  ngOnInit(): void {\n    this.characters$ = this.characterService.getAllCharacters();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "characterService",
                        "type": "CharacterService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "characterService",
                        "type": "CharacterService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<bb-fm-character-list *ngIf=\"(characters$ | async) as characters\" [characters]=\"characters\"></bb-fm-character-list>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-ea19386bfdaeefddd4ce1dd713d47874",
            "file": "src/app/@core/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-header",
            "styleUrls": [
                "header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Output, EventEmitter} from '@angular/core';\n\n@Component({\n  selector: 'bb-fm-header',\n  templateUrl: 'header.component.html',\n  styleUrls: ['header.component.scss']\n})\nexport class HeaderComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.header {\n  $height-header: 100px;\n  $padding-header: $padding-base;\n\n  height: $height-header;\n  padding: $padding-header;\n  text-align: left;\n  z-index: $z-index-header;\n  background-color: $color-background-secondary;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @include box-shadow;\n\n  &__figure {\n    display: inline-block;\n  }\n\n  &__figcaption {\n    @include visually-hidden;\n  }\n\n  &__logo {\n    height: calc(#{$height-header} - #{$padding-header * 2});\n    stroke: $color-secondary;\n    stroke-opacity: 0.8;\n    stroke-width: 2px;\n  }\n\n  &__title {\n    @include visually-hidden;\n  }\n}\n",
                    "styleUrl": "header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<header class=\"header\">\n  <h1 class=\"header__title\">Breaking Bad (Component store example)</h1>\n  <figure class=\"header__figure\">\n    <img class=\"header__logo\" src=\"assets/images/Breaking_Bad_logo.svg\">\n    <figcaption class=\"header__figcaption\">Breaking Bad Logo</figcaption>\n  </figure>\n  <bb-fm-burger-button></bb-fm-burger-button>\n</header>\n"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-d64c6239c7a023960699357df926411b",
            "file": "src/app/@core/sidenav/sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bb-fm-sidenav",
            "styleUrls": [
                "sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "sidenav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "line": 13
                },
                {
                    "name": "menuStructure",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "ISidenav[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faArrowLeft",
                    "defaultValue": "faArrowLeft",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "faArrowRight",
                    "defaultValue": "faArrowRight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ISidenav} from './sidenav.interface';\nimport { faArrowRight, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'bb-fm-sidenav',\n  templateUrl: 'sidenav.component.html',\n  styleUrls: ['sidenav.component.scss']\n})\nexport class SidenavComponent {\n\n  @Input() menuStructure: ISidenav[] = [];\n  @Input() isOpen = false;\n  faArrowRight = faArrowRight;\n  faArrowLeft = faArrowLeft;\n\n  toggle(): void {\n    this.isOpen = !this.isOpen;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/variables\";\n@import \"src/styles/mixins\";\n\n.sidenav {\n\n  @include media($from: tbl-l) {\n    height: 100vh;\n    padding-top: $padding-base * 4;\n  }\n\n  position: sticky;\n  z-index: 1;\n  bottom: 0;\n  left: 0;\n  top: 0;\n  background-color: $color-background-tertiary;\n  overflow-x: hidden;\n  transition: 0.5s;\n\n  &--open {\n\n    @include media($from: tbl-l) {\n      width: 14rem;\n    }\n\n  }\n\n  &--closed {\n\n    @include media($to: tbl-l) {\n      display: none;\n    }\n\n    @include media($from: tbl-l) {\n      width: 2rem;\n    }\n  }\n\n  &__button {\n    @include media($to: tbl-l) {\n      @include visually-hidden;\n    }\n    background: none;\n    color: white;\n    border: none;\n    padding: 0;\n    font: inherit;\n    cursor: pointer;\n    position: absolute;\n    top: 0;\n    right: 5px;\n    font-size: $font-size-title;\n    margin-left: 50px;\n    button:hover,\n    &-icon:focus {\n     outline: none;\n    }\n  }\n  &__list {\n    display: flex;\n    flex-direction: column;\n    &-item {\n      border-width: 2px 0;\n      border-style: solid;\n      border-color: white;\n      padding: $padding-base;\n      display: flex;\n      justify-content: center;\n      &__button {\n        @include no-btn-style;\n        font-size: $font-size-base;\n        font-weight: bold;\n        text-transform: uppercase;\n        color: white;\n        cursor: pointer;\n        &__content:focus {\n          outline: none;\n        }\n        &--active {\n          color: yellow;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nav aria-label=\"Main Navigation\" class=\"sidenav\" [ngClass]=\"{\n 'sidenav--open': isOpen,\n 'sidenav--closed': !isOpen\n}\">\n  <button class=\"sidenav__button\" (click)=\"toggle()\">\n    <fa-icon\n      class=\"header__button-icon\"\n      [icon]=\"isOpen ? faArrowLeft : faArrowRight\" tabindex=\"-1\"></fa-icon>\n  </button>\n  <ul *ngIf=\"isOpen\" class=\"sidenav__list\">\n    <li class=\"sidenav__list-item\" *ngFor=\"let menuItem of menuStructure\">\n      <button class=\"sidenav__list-item__button\" [routerLink]=\"menuItem.url\" [routerLinkActive]=\"['sidenav__list-item__button--active']\">\n        <span tabindex=\"-1\" class=\"sidenav__list-item__button__content\">{{menuItem.label}}</span>\n      </button>\n    </li>\n    <!-- <li class=\"has-submenu\">\n      <a href=\"…\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        Space Bears\n      </a>\n      <ul>\n        <li><a href=\"…\">Space Bear 6</a></li>\n        <li><a href=\"…\">Space Bear 6 Plus</a></li>\n      </ul>\n    </li> -->\n  </ul>\n</nav>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CharactersModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CharacterCardComponent"
                        },
                        {
                            "name": "CharacterListComponent"
                        },
                        {
                            "name": "CharactersContainer"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CharactersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CharactersRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BurgerButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SidenavComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SidenavComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrlApi: 'https://www.breakingbadapi.com/api/'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SidenavMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@costants/sidenav.const.ts",
                "type": "ISidenav[]",
                "defaultValue": "[\n  {\n    label: 'Characters',\n    url: 'characters'\n  }\n]"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrlApi: 'https://www.breakingbadapi.com/api/'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/@costants/sidenav.const.ts": [
                {
                    "name": "SidenavMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@costants/sidenav.const.ts",
                    "type": "ISidenav[]",
                    "defaultValue": "[\n  {\n    label: 'Characters',\n    url: 'characters'\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "characters"
                    },
                    {
                        "path": "characters",
                        "loadChildren": "./@views/characters/characters.module#CharactersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/@views/characters/characters-routing.module.ts",
                                        "module": "CharactersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CharactersContainer"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CharactersModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/header/burger-button/burger-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BurgerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/sidenav/sidenav.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISidenav",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@costants/sidenav.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SidenavMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@services/character.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CharacterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character-card/character-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character-list/character-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/character.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICharacter",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/@views/characters/characters.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharactersContainer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}